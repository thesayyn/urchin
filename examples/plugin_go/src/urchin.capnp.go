// Code generated by capnpc-go. DO NOT EDIT.

package main

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Person capnp.Struct

// Person_TypeID is the unique identifier for the type Person.
const Person_TypeID = 0xbf52e77e0f576393

func NewPerson(s *capnp.Segment) (Person, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Person(st), err
}

func NewRootPerson(s *capnp.Segment) (Person, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Person(st), err
}

func ReadRootPerson(msg *capnp.Message) (Person, error) {
	root, err := msg.Root()
	return Person(root.Struct()), err
}

func (s Person) String() string {
	str, _ := text.Marshal(0xbf52e77e0f576393, capnp.Struct(s))
	return str
}

func (s Person) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Person) DecodeFromPtr(p capnp.Ptr) Person {
	return Person(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Person) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Person) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Person) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Person) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Person) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Person) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Person) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Person) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Person) Birthdate() (Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Date(p.Struct()), err
}

func (s Person) HasBirthdate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Person) SetBirthdate(v Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewBirthdate sets the birthdate field to a newly
// allocated Date struct, preferring placement in s's segment.
func (s Person) NewBirthdate() (Date, error) {
	ss, err := NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Person) Email() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Person) HasEmail() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Person) EmailBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Person) SetEmail(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Person) Phones() (Person_PhoneNumber_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Person_PhoneNumber_List(p.List()), err
}

func (s Person) HasPhones() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Person) SetPhones(v Person_PhoneNumber_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPhones sets the phones field to a newly
// allocated Person_PhoneNumber_List, preferring placement in s's segment.
func (s Person) NewPhones(n int32) (Person_PhoneNumber_List, error) {
	l, err := NewPerson_PhoneNumber_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Person_PhoneNumber_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Person_List is a list of Person.
type Person_List = capnp.StructList[Person]

// NewPerson creates a new list of Person.
func NewPerson_List(s *capnp.Segment, sz int32) (Person_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Person](l), err
}

// Person_Future is a wrapper for a Person promised by a client call.
type Person_Future struct{ *capnp.Future }

func (f Person_Future) Struct() (Person, error) {
	p, err := f.Future.Ptr()
	return Person(p.Struct()), err
}
func (p Person_Future) Birthdate() Date_Future {
	return Date_Future{Future: p.Future.Field(3, nil)}
}

type Person_PhoneNumber capnp.Struct

// Person_PhoneNumber_TypeID is the unique identifier for the type Person_PhoneNumber.
const Person_PhoneNumber_TypeID = 0x85ae207049e7c5ab

func NewPerson_PhoneNumber(s *capnp.Segment) (Person_PhoneNumber, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Person_PhoneNumber(st), err
}

func NewRootPerson_PhoneNumber(s *capnp.Segment) (Person_PhoneNumber, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Person_PhoneNumber(st), err
}

func ReadRootPerson_PhoneNumber(msg *capnp.Message) (Person_PhoneNumber, error) {
	root, err := msg.Root()
	return Person_PhoneNumber(root.Struct()), err
}

func (s Person_PhoneNumber) String() string {
	str, _ := text.Marshal(0x85ae207049e7c5ab, capnp.Struct(s))
	return str
}

func (s Person_PhoneNumber) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Person_PhoneNumber) DecodeFromPtr(p capnp.Ptr) Person_PhoneNumber {
	return Person_PhoneNumber(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Person_PhoneNumber) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Person_PhoneNumber) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Person_PhoneNumber) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Person_PhoneNumber) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Person_PhoneNumber) Number() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Person_PhoneNumber) HasNumber() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Person_PhoneNumber) NumberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Person_PhoneNumber) SetNumber(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Person_PhoneNumber) Type() Person_PhoneNumber_Type {
	return Person_PhoneNumber_Type(capnp.Struct(s).Uint16(0))
}

func (s Person_PhoneNumber) SetType(v Person_PhoneNumber_Type) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Person_PhoneNumber_List is a list of Person_PhoneNumber.
type Person_PhoneNumber_List = capnp.StructList[Person_PhoneNumber]

// NewPerson_PhoneNumber creates a new list of Person_PhoneNumber.
func NewPerson_PhoneNumber_List(s *capnp.Segment, sz int32) (Person_PhoneNumber_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Person_PhoneNumber](l), err
}

// Person_PhoneNumber_Future is a wrapper for a Person_PhoneNumber promised by a client call.
type Person_PhoneNumber_Future struct{ *capnp.Future }

func (f Person_PhoneNumber_Future) Struct() (Person_PhoneNumber, error) {
	p, err := f.Future.Ptr()
	return Person_PhoneNumber(p.Struct()), err
}

type Person_PhoneNumber_Type uint16

// Person_PhoneNumber_Type_TypeID is the unique identifier for the type Person_PhoneNumber_Type.
const Person_PhoneNumber_Type_TypeID = 0xbebdddf3ce581e02

// Values of Person_PhoneNumber_Type.
const (
	Person_PhoneNumber_Type_mobile Person_PhoneNumber_Type = 0
	Person_PhoneNumber_Type_home   Person_PhoneNumber_Type = 1
	Person_PhoneNumber_Type_work   Person_PhoneNumber_Type = 2
)

// String returns the enum's constant name.
func (c Person_PhoneNumber_Type) String() string {
	switch c {
	case Person_PhoneNumber_Type_mobile:
		return "mobile"
	case Person_PhoneNumber_Type_home:
		return "home"
	case Person_PhoneNumber_Type_work:
		return "work"

	default:
		return ""
	}
}

// Person_PhoneNumber_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Person_PhoneNumber_TypeFromString(c string) Person_PhoneNumber_Type {
	switch c {
	case "mobile":
		return Person_PhoneNumber_Type_mobile
	case "home":
		return Person_PhoneNumber_Type_home
	case "work":
		return Person_PhoneNumber_Type_work

	default:
		return 0
	}
}

type Person_PhoneNumber_Type_List = capnp.EnumList[Person_PhoneNumber_Type]

func NewPerson_PhoneNumber_Type_List(s *capnp.Segment, sz int32) (Person_PhoneNumber_Type_List, error) {
	return capnp.NewEnumList[Person_PhoneNumber_Type](s, sz)
}

type Date capnp.Struct

// Date_TypeID is the unique identifier for the type Date.
const Date_TypeID = 0xebacb4189f40bb89

func NewDate(s *capnp.Segment) (Date, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Date(st), err
}

func NewRootDate(s *capnp.Segment) (Date, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Date(st), err
}

func ReadRootDate(msg *capnp.Message) (Date, error) {
	root, err := msg.Root()
	return Date(root.Struct()), err
}

func (s Date) String() string {
	str, _ := text.Marshal(0xebacb4189f40bb89, capnp.Struct(s))
	return str
}

func (s Date) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Date) DecodeFromPtr(p capnp.Ptr) Date {
	return Date(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Date) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Date) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Date) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Date) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Date) Year() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Date) SetYear(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Date) Month() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s Date) SetMonth(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s Date) Day() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s Date) SetDay(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

// Date_List is a list of Date.
type Date_List = capnp.StructList[Date]

// NewDate creates a new list of Date.
func NewDate_List(s *capnp.Segment, sz int32) (Date_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Date](l), err
}

// Date_Future is a wrapper for a Date promised by a client call.
type Date_Future struct{ *capnp.Future }

func (f Date_Future) Struct() (Date, error) {
	p, err := f.Future.Ptr()
	return Date(p.Struct()), err
}

const schema_85d3acc39d94e0f8 = "x\xda\x84\x92;\x88\x13Q\x18\x85\xcf\xb97\x9bX$" +
	"N\x86\x89h\xa3\x1b\xc4B\x03\x1bV\xd7*MR\xac" +
	"`\xc0G\xee\xb2\xa2\x85\x82\x93\xe4\xc2\x043\x0f&Y" +
	"\x96\x80\x8a\xcd\x82\xb6j+\x82\xad\x8b66\"j!" +
	"\x8b\xd8\xd8\x88\x85\xc5\x82V)\xc4\xca\xc6n\xe4N\xcc" +
	"\xa3\xb3\x9b\xf9\xf9\xcf\xf9\xcfwfVKldN\x17" +
	">\x0a\x08U^\xca&\xcf\xf7\xc6\xcd\xa8\xfcb\x07\xaa" +
	"D&\x8f:W\xad\xbb\xe3\x8d\xf7Xb\x0eXkR" +
	"\xd0\xb9\xc2\xc3\x80s\x83\xdb`\"\x8e]\xfb\xfc{\xff" +
	"\xed;\xd8e1\x97\x82k\xafY\xa1\xf3\xc9\x88\x9c=" +
	"^\xc6\x82\x93]`\xf2\xe7\xfb\xe3'\x1fv\xbf\xec`" +
	")c6\xbe\xf1\x99\xf3#u\xfd\xc51\x98<x\xd3" +
	"xz\xe4\xd5\xeeO\xa8\x02\x17\x96\xd3\xdd\xaf\xe2\xa1\xb3" +
	"/R\x95x\x89\x95d+\xeex\xbd\xa0\xda\x91n\x14" +
	"D\xb5\x96\x8e\x07aPmya\xa0/m\xf9m\x1d" +
	"Ce\xb8\x98\x93\x15ks\x14iu@f\x80\x0c\x01" +
	"\xfbT\x0dP'$\xd5\xaa Y\xa2\x99\xadT\x00u" +
	"RR\x9d\x15\xac\x07\xa9\x11\xf3\x10\xcc\x83\xd6p\x14i" +
	"ZsK\x90\x16\xf8\xdf \xd5\xf4n\x8bTy\x0a\xc0" +
	">Z3J\xfbP\x05\xa0\xb0\x0b\x15\xa0\xee\x87\xed^" +
	"_[^\xe8kk;\x8co\xcd<9\xf5\xcc\x0d\xc2" +
	" \x05\x9aum\xb3\x9dL\xaf \xd7\xd6\xb1*\xce\xc8" +
	"\\Cq]Ry\x82\xb6\xf8\x87\xa6\xcf\x00\xea\xa6\xa4" +
	"\xea\x0b\xdaR\x94\xd20=\xd3AWR\xdd\x13\xb4)" +
	"K\x94\x80}g\x03P\xb7%\xd5}A+p}=" +
	"\xad`Y\xfbn\xaf?}\xabG\xe6\xfc\x80\x07\xc1\x96" +
	"$\x8b\x8b\xff\x81\x19&\xed^<\xf4\xba\xee\x10\xd4," +
	"\xce?.\xc8\xe2Bo\x13\xc6uw\xc8II3\x8a" +
	"s\x86\xa2!\xa9.\x98lbB\xd14\x14\xeb\x92\xaa" +
	"e\xd0\xe4\x84\xe2\xe2q@\x9d\x97T\x9b\x82\xd6H\xbb" +
	"1%\x04%\xb8\xec\x87\xc1\xd0c\x16\x82Y0\xd7u" +
	"G\xd3\xe7\xbf\x01\x00\x00\xff\xff\xce\xe1\xc02"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_85d3acc39d94e0f8,
		Nodes: []uint64{
			0x85ae207049e7c5ab,
			0xbebdddf3ce581e02,
			0xbf52e77e0f576393,
			0xebacb4189f40bb89,
		},
		Compressed: true,
	})
}
